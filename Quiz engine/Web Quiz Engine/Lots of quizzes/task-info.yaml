type: edu
custom_name: stage2
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class);
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static int quizId1 = 0;
        private static int quizId2 = 0;

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\",\n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": 2\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": 1\n" +
                "}";

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[]{
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizId1, "0", false),
            () -> checkQuizSuccess(quizId1, "1", false),
            () -> checkQuizSuccess(quizId1, "2", true),
            () -> checkQuizSuccess(quizId1, "3", false),

            () -> checkQuizSuccess(quizId2, "0", false),
            () -> checkQuizSuccess(quizId2, "1", true),
            () -> checkQuizSuccess(quizId2, "2", false),
            () -> checkQuizSuccess(quizId2, "3", false),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizNum == 1 ? quiz1 : quiz2).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        if (quizNum == 1) {
                            quizId1 = i;
                        } else {
                            quizId2 = i;
                        }
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;
            String quiz = quizNum == 1 ? quiz1 : quiz2;

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizNum == 1 ? quizId1 : quizId2;

            String url = "/api/quizzes/" + (quizId + 125);

            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, Map.of("answer", answerSent));
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/quiz/QuizController.java
  visible: true
  text: |
    package engine.quiz;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;
    import java.util.Map;

    @RestController
    @RequestMapping(path = "/api/quizzes")
    public class QuizController {
        private final QuizService quizService;
        private int ids = 1;

        @Autowired
        QuizController(QuizService quizService){
            this.quizService = quizService;
        }

        @GetMapping
        public ResponseEntity<List<Quiz>> getAllQuizzes(){
            return new ResponseEntity<>(quizService.getAllQuizzes(), HttpStatus.OK);
        }

        @GetMapping("/{id}")
        public ResponseEntity<Quiz> getSingleQuiz(@PathVariable int id){
            Quiz quiz = quizService.getSingleQuiz(id);
           if(quiz != null){
               return new ResponseEntity<>(quiz, HttpStatus.OK);
           } else
               throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }

        @PostMapping
        public ResponseEntity<Quiz> createQuiz(@RequestBody Quiz quiz){
            quiz.setId(ids);
            System.out.println(quiz.getAnswer());
            quizService.addQuiz(quiz);
            ids += 1;
            return new ResponseEntity<>(quiz, HttpStatus.OK);
        }

        @PostMapping("/{id}/solve")
        public ResponseEntity<Response> solveQuiz(@PathVariable int id, @RequestParam int answer){
           Quiz quiz  = quizService.getSingleQuiz(id);
           Response response;
           if(quiz.getAnswer() == answer){
               response = new Response(true, "Congratulations, you're right!");
               return new ResponseEntity<>(response, HttpStatus.OK);
           } else
               response  = new Response(false, "Wrong answer! Please, try again.");
               return new ResponseEntity<>(response, HttpStatus.OK );

        }

    }
  learner_created: true
- name: src/engine/quiz/QuizRepository.java
  visible: true
  text: |
    package engine.quiz;

    import org.springframework.context.annotation.Configuration;
    import org.springframework.stereotype.Repository;

    import java.util.HashMap;
    import java.util.Map;

    @Repository
    public class QuizRepository {


        private final Map<Integer, Quiz> list;

        QuizRepository(){
            this.list = new HashMap<>();
        }

        public void addQuiz(Quiz quiz){
            this.list.put(quiz.getId(), quiz);
        }

        public Map<Integer, Quiz> getList() {
            return list;
        }

        public Quiz getQuiz(int id){
            return list.get(id);
        }
    }
  learner_created: true
- name: src/engine/quiz/QuizService.java
  visible: true
  text: |
    package engine.quiz;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;


    @Service
    public class QuizService {
        private final QuizRepository quizRepository;

        @Autowired
        QuizService(QuizRepository quizRepository){
            this.quizRepository = quizRepository;
        }

        public List<Quiz> getAllQuizzes(){

            return new ArrayList<>(quizRepository.getList().values());
        }

        public Quiz getSingleQuiz(int id){
            return this.quizRepository.getQuiz(id);
        }

        public void addQuiz(Quiz quiz){
            this.quizRepository.addQuiz(quiz);
        }
    }
  learner_created: true
- name: src/engine/quiz/Quiz.java
  visible: true
  text: |
    package engine.quiz;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
    import com.fasterxml.jackson.annotation.JsonProperty;


    public class Quiz {
        private int id;
        private String title;
        private String text;
        private String[] options;

        private int answer;

        Quiz(){}

        Quiz(String title, String text, String[] options, int answer){
            this.title = title;
            this.text = text;
            this.options = options;
            this.answer = answer;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        @JsonIgnore
        public int getAnswer() {
            return answer;
        }
        @JsonProperty("answer")
        public void setAnswer(int answer) {
            this.answer = answer;
        }

        public String getTitle(){
            return this.title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText(){
            return this.text;
        }

        public void setText(String text) {
            this.text = text;
        }

        public String[] getOptions(){
            return this.options;
        }

        public void setOptions(String[] options) {
            this.options = options;
        }
    }
  learner_created: true
- name: src/engine/quiz/Response.java
  visible: true
  text: |
    package engine.quiz;

    public class Response {
        private boolean success;
        private String feedback;

        Response(){};
        Response(boolean success, String feedback){
            this.success = success;
            this.feedback = feedback;
        }


        public void setSuccess(boolean success){
            this.success = success;
        }

        public void setFeedback(String feedback){
            this.feedback = feedback;
        }

        public boolean isSuccess() {
            return success;
        }

        public String getFeedback(){
            return this.feedback;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8253#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 11 Nov 2021 18:04:27 UTC
record: 2
