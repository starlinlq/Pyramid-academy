type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: resources/application.properties
  visible: true
  text: |-
    server.port=8080
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true

    spring.datasource.url=jdbc:h2:file:../recipes_db
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=starlinlq
    spring.datasource.password=password

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.6'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.h2database:h2'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    }
  learner_created: false
- name: src/recipes/entity/Recipe.java
  visible: true
  text: |
    package recipes.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.hibernate.annotations.Fetch;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Size;
    import java.util.List;

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Entity
    @Table(name="TBL_RECIPE")
    public class Recipe {
       @JsonIgnore
       @Id
       @SequenceGenerator(name = "recipe_sequence", sequenceName = "recipe_sequence", allocationSize = 1)
       @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "recipe_sequence")
       private long id;
       @NotBlank
       private String name;
       @NotBlank
       private String description;
       @Size(min = 1)
       @ElementCollection
       private List<String> ingredients;
       @Size(min = 1)
       @ElementCollection
       private List<String> directions;
    }
  learner_created: false
- name: src/recipes/services/RecipeService.java
  visible: true
  text: |
    package recipes.services;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import recipes.entity.Recipe;
    import recipes.repositories.RecipeRepo;

    import java.util.Optional;

    @Service
    public class RecipeService {

      @Autowired
      private RecipeRepo repo;

        public Recipe save(Recipe recipe){
          return repo.save(recipe);
        }

        public Recipe getSingleRecipe(long id){
            Optional<Recipe> recipeOptional= repo.findById(id);
            return recipeOptional.orElse(null);
        }


        public boolean deleteRecipeById(long id){

           if(repo.existsById(id)){
               repo.deleteById(id);
               return true;
           }

           return false;
        }

    }
  learner_created: false
- name: src/recipes/controllers/RecipesController.java
  visible: true
  text: |
    package recipes.controllers;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import recipes.entity.Recipe;
    import recipes.services.RecipeService;

    import javax.validation.Valid;

    @RestController
    @RequestMapping("/api/recipe")
    public class RecipesController {
        private final RecipeService recipeService;

        @Autowired
        RecipesController(RecipeService recipeService){
            this.recipeService = recipeService;
        }

        @GetMapping("/{id}")
        public ResponseEntity<Recipe> getSingleRecipe(@PathVariable long id){
            Recipe recipe = recipeService.getSingleRecipe(id);
            if(recipe != null){
                return ResponseEntity.ok(recipe);
            } else
                return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }

        @PostMapping("/new")
        public ResponseEntity<Response> createRecipe(@Valid @RequestBody Recipe newRecipe){
            Response response = new Response();
            response.setId(recipeService.save(newRecipe).getId());
            return ResponseEntity.ok().body(response);
        }

        @DeleteMapping("/{id}")
        public ResponseEntity<?> deleteRecipe(@PathVariable long id){
            if(recipeService.deleteRecipeById(id)){
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }


    class Response{
        private long id;

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import recipes.RecipesApplication;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class, "../recipes_db.mv.db");
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            new Recipe(
                "Fresh Mint Tea /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),

            new Recipe(
                "Warming Ginger Tea /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            )
        };

        final Recipe[] INCORRECT_RECIPES = {
            new Recipe(
                null,
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                null,
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),

            new Recipe(
                "Fresh Mint Tea",
                "Light, aromatic and refreshing beverage, ...",
                null,
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                null
            ),

            new Recipe(
                "  ",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{"boiled water", "honey", "fresh mint leaves"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                "  ",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy"}
            ),

            new Recipe(
                "Fresh Mint Tea",
                "Light, aromatic and refreshing beverage, ...",
                new String[]{},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again"}
            ),

            new Recipe(
                "Warming Ginger Tea",
                "Ginger tea is a warming drink for cool weather, ...",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey"},
                new String[]{}
            )
        };


        final String[] JSON_RECIPES = toJson(RECIPES);
        final String[] JSON_INCORRECT_RECIPES = toJson(INCORRECT_RECIPES);

        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";

        // recipes ids will be saved when testing POST requests and used later to test GET/DELETE requests
        final List<Integer> recipeIds = new ArrayList<>();


        // Helper functions ---

        static String[] toJson(Object[] objects) {
            final Gson gson = new Gson();
            return Arrays
                .stream(objects)
                .map(gson::toJson)
                .toArray(String[]::new);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }

        CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception e) {
                throw new UnexpectedError(e.getMessage());
            }

            return correct();
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            () -> testPostRecipe(JSON_RECIPES[0]),
            () -> testPostRecipe(JSON_RECIPES[1]),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),
            this::reloadServer,
            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1]),

            () -> testDeleteRecipe(recipeIds.get(0)),

            () -> testDeleteRecipeNotFoundStatusCode(recipeIds.get(0)),
            () -> testGetRecipeNotFoundStatusCode(recipeIds.get(0)),

            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[0]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[1]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[2]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[3]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[4]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[5]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[6]),
            () -> testPostIncorrectRecipeStatusCode(JSON_INCORRECT_RECIPES[7])
        };

        CheckResult testPostRecipe(String jsonRecipe) {

            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe) {

            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testDeleteRecipe(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 204);

            return correct();
        }

        CheckResult testDeleteRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = delete(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testGetRecipeNotFoundStatusCode(int recipeId) {
            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }

        CheckResult testPostIncorrectRecipeStatusCode(String incorrectJsonRecipe) {
            HttpResponse response = post(API_RECIPE_NEW, incorrectJsonRecipe).send();

            throwIfIncorrectStatusCode(response, 400);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/repositories/RecipeRepo.java
  visible: true
  text: |
    package recipes.repositories;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import recipes.entity.Recipe;

    @Repository
    public interface RecipeRepo extends JpaRepository<Recipe, Long> {
    }
  learner_created: false
- name: src/recipes/controllers/shutdownController.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/180/stages/919/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #6

    GET /api/recipe/1 should respond with status code 200, responded: 404

    Response body:

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2021-12-02 13:20:15.881  INFO 22376 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication using Java 17 on Starlins-MBP.attlocal.net with PID 22376 (started by starlinlq in /Users/starlinlq/Desktop/Untitled/Recipes/Recipes/task)
    2021-12-02 13:20:15.883  INFO 22376 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2021-12-02 13:20:16.950  INFO 22376 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2021-12-02 13:20:17.010  INFO 22376 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 48 ms. Found 1 JPA repository interfaces.
    2021-12-02 13:20:17.705  INFO 22376 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
    2021-12-02 13:20:17.718  INFO 22376 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-12-02 13:20:17.719  INFO 22376 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2021-12-02 13:20:17.841  INFO 22376 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-12-02 13:20:17.841  INFO 22376 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1903 ms
    2021-12-02 13:20:18.126  INFO 22376 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
    2021-12-02 13:20:18.305  INFO 22376 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
    2021-12-02 13:20:18.361  INFO 22376 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-12-02 13:20:18.426  INFO 22376 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.32.Final
    2021-12-02 13:20:18.621  INFO 22376 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
    2021-12-02 13:20:18.776  INFO 22376 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-12-02 13:20:19.489  INFO 22376 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-12-02 13:20:19.499  INFO 22376 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-12-02 13:20:19.799  WARN 22376 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-12-02 13:20:20.199  INFO 22376 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-12-02 13:20:20.237  INFO 22376 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
    2021-12-02 13:20:20.250  INFO 22376 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 4.711 seconds (JVM running for 5.564)
    2021-12-02 13:20:20.588  INFO 22376 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-12-02 13:20:20.588  INFO 22376 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-12-02 13:20:20.590  INFO 22376 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
    2021-12-02 13:20:20.927  INFO 22376 --- [       Thread-4] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-12-02 13:20:20.927  INFO 22376 --- [       Thread-4] .SchemaDropperImpl$DelayedDropActionImpl : HHH000477: Starting delayed evictData of schema as part of SessionFactory shut-down&#39;
    2021-12-02 13:20:20.935  INFO 22376 --- [       Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
    2021-12-02 13:20:20.937  INFO 22376 --- [       Thread-4] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

      .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::                (v2.5.6)

    2021-12-02 13:20:21.038  INFO 22376 --- [    Test worker] recipes.RecipesApplication               : Starting RecipesApplication using Java 17 on Starlins-MBP.attlocal.net with PID 22376 (started by starlinlq in /Users/starlinlq/Desktop/Untitled/Recipes/Recipes/task)
    2021-12-02 13:20:21.038  INFO 22376 --- [    Test worker] recipes.RecipesApplication               : No active profile set, falling back to default profiles: default
    2021-12-02 13:20:21.262  INFO 22376 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
    2021-12-02 13:20:21.268  INFO 22376 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 6 ms. Found 1 JPA repository interfaces.
    2021-12-02 13:20:21.374  INFO 22376 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
    2021-12-02 13:20:21.375  INFO 22376 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-12-02 13:20:21.376  INFO 22376 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.54]
    2021-12-02 13:20:21.409  INFO 22376 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-12-02 13:20:21.410  INFO 22376 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 370 ms
    2021-12-02 13:20:21.547  INFO 22376 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
    2021-12-02 13:20:21.552  INFO 22376 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
    2021-12-02 13:20:21.557  INFO 22376 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
    2021-12-02 13:20:21.566  INFO 22376 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
    2021-12-02 13:20:21.620  INFO 22376 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
    2021-12-02 13:20:21.621  INFO 22376 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;
    2021-12-02 13:20:21.686  WARN 22376 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
    2021-12-02 13:20:21.921  INFO 22376 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-12-02 13:20:21.936  INFO 22376 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;
    2021-12-02 13:20:21.943  INFO 22376 --- [    Test worker] recipes.RecipesApplication               : Started RecipesApplication in 0.924 seconds (JVM running for 7.257)
    2021-12-02 13:20:21.952  INFO 22376 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-12-02 13:20:21.953  INFO 22376 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-12-02 13:20:21.955  INFO 22376 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
  time: Thu, 02 Dec 2021 19:20:22 UTC
record: 2
